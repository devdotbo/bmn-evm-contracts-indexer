#!/usr/bin/env tsx

/**
 * Export Ponder schema for external client usage (TypeScript version)
 * Usage: npx tsx scripts/export-schema.ts [target_directory]
 * Example: npx tsx scripts/export-schema.ts ../my-client-app/src/schema
 */

import { promises as fs } from "fs";
import path from "path";

const colors = {
  red: "\x1b[31m",
  green: "\x1b[32m",
  yellow: "\x1b[33m",
  reset: "\x1b[0m",
};

async function exportSchema(targetDir: string = "./exported-schema") {
  console.log(`${colors.yellow}📦 Ponder Schema Export Tool${colors.reset}`);
  console.log("=================================");

  try {
    // Check if ponder.schema.ts exists
    const schemaPath = "ponder.schema.ts";
    await fs.access(schemaPath);
    
    // Create target directory
    await fs.mkdir(targetDir, { recursive: true });
    console.log(`${colors.green}✓${colors.reset} Target directory: ${targetDir}`);

    // Copy schema file
    console.log(`${colors.yellow}→${colors.reset} Copying ponder.schema.ts...`);
    await fs.copyFile(schemaPath, path.join(targetDir, "ponder.schema.ts"));

    // Copy type declarations if they exist
    try {
      await fs.access("ponder-env.d.ts");
      console.log(`${colors.yellow}→${colors.reset} Copying type declarations...`);
      await fs.copyFile("ponder-env.d.ts", path.join(targetDir, "ponder-env.d.ts"));
    } catch {
      // Type declarations don't exist, skip
    }

    // Create index.ts for easier imports
    console.log(`${colors.yellow}→${colors.reset} Creating index.ts...`);
    const indexContent = `/**
 * BMN Indexer Schema Exports
 * Auto-generated by export-schema.ts
 */

export * from "./ponder.schema";

// Re-export for convenience
import * as schema from "./ponder.schema";
export { schema };

// Export individual tables for destructuring
export {
  srcEscrow,
  dstEscrow,
  escrowWithdrawal,
  escrowCancellation,
  fundsRescued,
  atomicSwap,
  chainStatistics,
  bmnTransfer,
  bmnApproval,
  bmnTokenHolder,
} from "./ponder.schema";
`;
    await fs.writeFile(path.join(targetDir, "index.ts"), indexContent);

    // Create client helper
    console.log(`${colors.yellow}→${colors.reset} Creating client helper...`);
    const clientHelperContent = `/**
 * BMN Indexer Client Helper
 * Provides a pre-configured client for querying the indexer
 */

import { createClient, eq, desc, asc, and, or, gt, gte, lt, lte } from "@ponder/client";
import * as schema from "./ponder.schema";

export interface ClientConfig {
  url?: string;
  debug?: boolean;
}

export function createBmnClient(config: ClientConfig = {}) {
  const url = config.url || process.env.INDEXER_URL || "http://localhost:42069";
  const client = createClient(\`\${url}/sql\`, { schema });

  return {
    client,
    db: client.db,
    
    // Convenience methods
    queries: {
      // Get active source escrows
      async getActiveEscrows(limit = 10) {
        return client.db
          .select()
          .from(schema.srcEscrow)
          .where(eq(schema.srcEscrow.status, "Active"))
          .limit(limit)
          .execute();
      },

      // Get escrow by ID
      async getEscrowById(id: string) {
        const [escrow] = await client.db
          .select()
          .from(schema.srcEscrow)
          .where(eq(schema.srcEscrow.id, id))
          .limit(1)
          .execute();
        return escrow;
      },

      // Get top BMN token holders
      async getTopHolders(chainId?: number, limit = 10) {
        let query = client.db
          .select()
          .from(schema.bmnTokenHolder);
        
        if (chainId) {
          query = query.where(eq(schema.bmnTokenHolder.chainId, chainId));
        }
        
        return query
          .orderBy(desc(schema.bmnTokenHolder.balance))
          .limit(limit)
          .execute();
      },

      // Get chain statistics
      async getChainStats(chainId?: number) {
        if (chainId) {
          const [stats] = await client.db
            .select()
            .from(schema.chainStatistics)
            .where(eq(schema.chainStatistics.chain, chainId))
            .limit(1)
            .execute();
          return stats;
        }
        
        return client.db
          .select()
          .from(schema.chainStatistics)
          .execute();
      },

      // Get recent transfers
      async getRecentTransfers(limit = 20) {
        return client.db
          .select()
          .from(schema.bmnTransfer)
          .orderBy(desc(schema.bmnTransfer.blockNumber))
          .limit(limit)
          .execute();
      },

      // Get atomic swaps
      async getAtomicSwaps(status?: string, limit = 10) {
        let query = client.db
          .select()
          .from(schema.atomicSwap);
        
        if (status) {
          query = query.where(eq(schema.atomicSwap.status, status));
        }
        
        return query
          .limit(limit)
          .execute();
      },
    },

    // Live query helpers
    live: {
      // Subscribe to chain statistics updates
      chainStats(callback: (data: any[]) => void, onError?: (error: Error) => void) {
        return client.live(
          (db) => db.select().from(schema.chainStatistics).execute(),
          callback,
          onError
        );
      },

      // Subscribe to new escrows
      newEscrows(callback: (data: any[]) => void, onError?: (error: Error) => void) {
        return client.live(
          (db) => db
            .select()
            .from(schema.srcEscrow)
            .orderBy(desc(schema.srcEscrow.createdAt))
            .limit(10)
            .execute(),
          callback,
          onError
        );
      },
    },
  };
}

// Export query builder utilities
export { eq, desc, asc, and, or, gt, gte, lt, lte } from "@ponder/client";
`;
    await fs.writeFile(path.join(targetDir, "client.ts"), clientHelperContent);

    // Create package.json
    console.log(`${colors.yellow}→${colors.reset} Creating package.json...`);
    const packageJson = {
      name: "@bmn/indexer-schema",
      version: "1.0.0",
      description: "BMN EVM Contracts Indexer Schema and Client",
      main: "index.js",
      types: "index.ts",
      files: [
        "ponder.schema.ts",
        "ponder-env.d.ts",
        "index.ts",
        "client.ts",
        "*.js",
        "*.d.ts"
      ],
      scripts: {
        build: "tsc --declaration --esModuleInterop --skipLibCheck --outDir .",
        prepublishOnly: "npm run build"
      },
      dependencies: {
        "@ponder/client": "^0.12.0",
        "ponder": "^0.12.0"
      },
      devDependencies: {
        "typescript": "^5.0.0"
      },
      keywords: ["bmn", "indexer", "ponder", "schema", "blockchain"],
      author: "BMN Team",
      license: "MIT"
    };
    await fs.writeFile(
      path.join(targetDir, "package.json"),
      JSON.stringify(packageJson, null, 2)
    );

    // Create tsconfig.json
    console.log(`${colors.yellow}→${colors.reset} Creating tsconfig.json...`);
    const tsConfig = {
      compilerOptions: {
        target: "ES2020",
        module: "commonjs",
        lib: ["ES2020"],
        declaration: true,
        declarationMap: true,
        outDir: ".",
        strict: true,
        esModuleInterop: true,
        skipLibCheck: true,
        forceConsistentCasingInFileNames: true,
        resolveJsonModule: true
      },
      include: ["*.ts"],
      exclude: ["node_modules", "dist"]
    };
    await fs.writeFile(
      path.join(targetDir, "tsconfig.json"),
      JSON.stringify(tsConfig, null, 2)
    );

    // Create README
    console.log(`${colors.yellow}→${colors.reset} Creating README...`);
    const readmeContent = await fs.readFile(
      path.join(__dirname, "export-schema.sh"),
      "utf-8"
    );
    // Extract README content from shell script or create new one
    const readme = `# BMN Indexer Schema & Client

This package provides TypeScript types and a client helper for the BMN EVM Contracts Indexer.

## Installation

\`\`\`bash
# Install from NPM (if published)
pnpm add @bmn/indexer-schema

# Or install locally
pnpm add file:../path/to/exported-schema
\`\`\`

## Quick Start

### Basic Usage

\`\`\`typescript
import { createBmnClient } from "@bmn/indexer-schema/client";

const bmn = createBmnClient({
  url: "http://localhost:42069", // Optional, defaults to env or localhost
});

// Use convenience methods
const activeEscrows = await bmn.queries.getActiveEscrows();
const topHolders = await bmn.queries.getTopHolders(8453); // Base chain
const stats = await bmn.queries.getChainStats();

// Or use raw queries
const customQuery = await bmn.db
  .select()
  .from(schema.srcEscrow)
  .where(eq(schema.srcEscrow.maker, "0x..."))
  .execute();
\`\`\`

### Live Queries

\`\`\`typescript
// Subscribe to real-time updates
const { unsubscribe } = bmn.live.chainStats(
  (data) => console.log("Stats updated:", data),
  (error) => console.error("Error:", error)
);

// Clean up when done
unsubscribe();
\`\`\`

### Direct Schema Import

\`\`\`typescript
import * as schema from "@bmn/indexer-schema";
import { createClient } from "@ponder/client";

const client = createClient("http://localhost:42069/sql", { schema });
\`\`\`

## Available Tables

- \`srcEscrow\` - Source chain escrows
- \`dstEscrow\` - Destination chain escrows
- \`escrowWithdrawal\` - Withdrawal events
- \`escrowCancellation\` - Cancellation events
- \`fundsRescued\` - Rescued funds events
- \`atomicSwap\` - Cross-chain swap aggregations
- \`chainStatistics\` - Per-chain analytics
- \`bmnTransfer\` - BMN token transfers
- \`bmnApproval\` - BMN token approvals
- \`bmnTokenHolder\` - BMN token balances

## Publishing

To publish this package to NPM:

\`\`\`bash
npm login
npm run build
npm publish --access public
\`\`\`

## Development

\`\`\`bash
# Install dependencies
pnpm install

# Build TypeScript
pnpm run build

# Link for local development
pnpm link
\`\`\`

## License

MIT
`;
    await fs.writeFile(path.join(targetDir, "README.md"), readme);

    // Summary
    console.log("");
    console.log(`${colors.green}✅ Schema export completed successfully!${colors.reset}`);
    console.log("");
    console.log(`📁 Exported to: ${targetDir}`);
    console.log("");
    console.log("📋 Exported files:");
    console.log("   - ponder.schema.ts (Schema definitions)");
    console.log("   - index.ts (Main exports)");
    console.log("   - client.ts (Client helper with queries)");
    console.log("   - package.json (Package configuration)");
    console.log("   - tsconfig.json (TypeScript config)");
    console.log("   - README.md (Documentation)");
    console.log("");
    console.log("📦 Next steps:");
    console.log(`   1. cd ${targetDir}`);
    console.log("   2. pnpm install");
    console.log("   3. pnpm run build (if publishing)");
    console.log("   4. Use in your client: import { createBmnClient } from '@bmn/indexer-schema/client'");
    console.log("");
    console.log("💡 Tip: You can publish this as an NPM package for easier sharing");

  } catch (error) {
    console.error(`${colors.red}❌ Error:`, error);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  const targetDir = process.argv[2];
  exportSchema(targetDir);
}

export { exportSchema };